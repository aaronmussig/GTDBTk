{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example\n",
    "\n",
    "This jupyter notebook demonstrates how to run the `classify_wf` command on a set of test genomes.\n",
    "\n",
    "For a full list of commands see:\n",
    "* `gtdbtk -h`, or\n",
    "* [GTDB-Tk commands](https://ecogenomics.github.io/GTDBTk/commands/)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Obtaining data\n",
    "\n",
    "This example will use the following two genomes that we will refer to as:\n",
    "* Genome A: `GCF_003947435.1` [[GTDB](https://gtdb.ecogenomic.org/genomes?gid=GCF_003947435.1) / [NCBI](https://www.ncbi.nlm.nih.gov/assembly/GCF_003947435.1/)]\n",
    "* Genome B: `GCA_002011125.1` [[GTDB](https://gtdb.ecogenomic.org/genomes?gid=GCA_002011125.1) / [NCBI](https://www.ncbi.nlm.nih.gov/assembly/GCA_002011125.1/)]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the directory.\n",
    "mkdir -p /tmp/gtdbtk && cd /tmp/gtdbtk\n",
    "\n",
    "# Obtain the genomes.\n",
    "mkdir -p /tmp/gtdbtk/genomes\n",
    "wget -q https://ftp.ncbi.nlm.nih.gov/genomes/all/GCF/003/947/435/GCF_003947435.1_ASM394743v1/GCF_003947435.1_ASM394743v1_genomic.fna.gz -O /tmp/gtdbtk/genomes/genome_a.fna.gz\n",
    "wget -q https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/002/011/125/GCA_002011125.1_ASM201112v1/GCA_002011125.1_ASM201112v1_genomic.fna.gz -O /tmp/gtdbtk/genomes/genome_b.fna.gz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Gene calling (identify)\n",
    "\n",
    "Note that the workflow can be run as a single command `classify_wf`, however, each step will be run individually in this notebook. It can sometimes be useful to run the steps individually when processing large pipelines."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "total 1464\n",
      "-rw-rw-r--. 1 uqamussi uqamussi 877141 Mar 12  2019 \u001B[0m\u001B[38;5;9mgenome_a.fna.gz\u001B[0m\n",
      "-rw-rw-r--. 1 uqamussi uqamussi 616683 Mar  3  2017 \u001B[38;5;9mgenome_b.fna.gz\u001B[0m\n"
     ]
    }
   ],
   "source": [
    "ls -l /tmp/gtdbtk/genomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2020-08-03 11:03:42] \u001B[1mINFO:\u001B[0m GTDB-Tk v1.3.0\n",
      "[2020-08-03 11:03:42] \u001B[1mINFO:\u001B[0m gtdbtk identify --genome_dir /tmp/gtdbtk/genomes --out_dir /tmp/gtdbtk/identify --extension gz --cpus 2\n",
      "[2020-08-03 11:03:42] \u001B[1mINFO:\u001B[0m Using GTDB-Tk reference data version r95: /srv/db/gtdbtk/official/release95\n",
      "[2020-08-03 11:03:42] \u001B[1mINFO:\u001B[0m Identifying markers in 2 genomes with 2 threads.\n",
      "[2020-08-03 11:03:42] \u001B[1mINFO:\u001B[0m Running Prodigal V2.6.3 to identify genes.\n",
      "==> Processed 2/2 (100%) genomes [ 6.28s/it, ETA 00:00]\n",
      "[2020-08-03 11:03:54] \u001B[1mINFO:\u001B[0m Identifying TIGRFAM protein families.\n",
      "==> Processed 2/2 (100%) genomes [ 3.79s/it, ETA 00:00]\n",
      "[2020-08-03 11:04:02] \u001B[1mINFO:\u001B[0m Identifying Pfam protein families.\n",
      "==> Processed 2/2 (100%) genomes [ 1.62it/s, ETA 00:00]\n",
      "[2020-08-03 11:04:03] \u001B[1mINFO:\u001B[0m Annotations done using HMMER 3.1b2 (February 2015).\n",
      "[2020-08-03 11:04:03] \u001B[1mINFO:\u001B[0m Done.\n"
     ]
    }
   ],
   "source": [
    "gtdbtk identify --genome_dir /tmp/gtdbtk/genomes --out_dir /tmp/gtdbtk/identify --extension gz --cpus 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results\n",
    "\n",
    "The called genes and marker information can be found under each genomes respeective intermediate files directory, as shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "genome_a.fna_pfam_tophit.tsv         genome_a.fna_protein.gff.sha256\n",
      "genome_a.fna_pfam_tophit.tsv.sha256  genome_a.fna_tigrfam.out\n",
      "genome_a.fna_pfam.tsv                genome_a.fna_tigrfam.out.sha256\n",
      "genome_a.fna_pfam.tsv.sha256         genome_a.fna_tigrfam_tophit.tsv\n",
      "genome_a.fna_protein.faa             genome_a.fna_tigrfam_tophit.tsv.sha256\n",
      "genome_a.fna_protein.faa.sha256      genome_a.fna_tigrfam.tsv\n",
      "genome_a.fna_protein.fna             genome_a.fna_tigrfam.tsv.sha256\n",
      "genome_a.fna_protein.fna.sha256      prodigal_translation_table.tsv\n",
      "genome_a.fna_protein.gff             prodigal_translation_table.tsv.sha256\n"
     ]
    }
   ],
   "source": [
    "ls /tmp/gtdbtk/identify/identify/intermediate_results/marker_genes/genome_a.fna/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "However, it is sometimes more useful to just read the summary files which detail markers identified from either the archaeal 122, or bacterial 120 marker set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "name\tnumber_unique_genes\tnumber_multiple_genes\tnumber_multiple_unique_genes\tnumber_missing_genes\tlist_unique_genes\tlist_multiple_genes\tlist_multiple_unique_genes\tlist_missing_genes\n",
      "genome_a.fna\t109\t3\t0\t10\tPF00368.13,PF00410.14,PF00466.15,PF00687.16,PF00827.12,PF00900.15,PF01000.21,PF01015.13,PF01090.14,PF01092.14,PF01157.13,PF01191.14,PF01194.12,PF01198.14,PF01200.13,PF01269.12,PF01280.15,PF01282.14,PF01655.13,PF01798.13,PF01864.12,PF01868.11,PF01984.15,PF01990.12,PF02006.11,PF02978.14,PF03874.11,PF04019.7,PF04104.9,PF04919.7,PF07541.7,PF13656.1,PF13685.1,TIGR00021,TIGR00037,TIGR00042,TIGR00111,TIGR00134,TIGR00240,TIGR00264,TIGR00270,TIGR00279,TIGR00283,TIGR00291,TIGR00293,TIGR00307,TIGR00308,TIGR00323,TIGR00324,TIGR00335,TIGR00336,TIGR00337,TIGR00389,TIGR00392,TIGR00398,TIGR00405,TIGR00408,TIGR00422,TIGR00425,TIGR00432,TIGR00442,TIGR00448,TIGR00456,TIGR00463,TIGR00468,TIGR00471,TIGR00490,TIGR00491,TIGR00501,TIGR00521,TIGR00549,TIGR00670,TIGR00729,TIGR00936,TIGR00982,TIGR01008,TIGR01012,TIGR01018,TIGR01020,TIGR01025,TIGR01028,TIGR01038,TIGR01046,TIGR01052,TIGR01060,TIGR01077,TIGR01080,TIGR01213,TIGR01309,TIGR01952,TIGR02076,TIGR02153,TIGR02236,TIGR02258,TIGR02390,TIGR02651,TIGR03626,TIGR03627,TIGR03628,TIGR03636,TIGR03653,TIGR03665,TIGR03671,TIGR03672,TIGR03674,TIGR03677,TIGR03680,TIGR03683,TIGR03684\tPF01496.14,TIGR00458,TIGR00658\t\tPF01866.12,TIGR00064,TIGR00373,TIGR00522,TIGR02338,TIGR02389,TIGR03629,TIGR03670,TIGR03673,TIGR03722\n",
      "genome_b.fna\t118\t2\t0\t2\tPF00368.13,PF00410.14,PF00466.15,PF00687.16,PF00827.12,PF00900.15,PF01000.21,PF01015.13,PF01090.14,PF01092.14,PF01157.13,PF01191.14,PF01194.12,PF01198.14,PF01200.13,PF01269.12,PF01280.15,PF01282.14,PF01655.13,PF01798.13,PF01864.12,PF01866.12,PF01868.11,PF01984.15,PF01990.12,PF02006.11,PF02978.14,PF03874.11,PF04019.7,PF04104.9,PF04919.7,PF07541.7,PF13656.1,TIGR00021,TIGR00037,TIGR00042,TIGR00064,TIGR00111,TIGR00134,TIGR00240,TIGR00264,TIGR00270,TIGR00279,TIGR00283,TIGR00291,TIGR00293,TIGR00307,TIGR00308,TIGR00323,TIGR00324,TIGR00335,TIGR00336,TIGR00337,TIGR00373,TIGR00389,TIGR00392,TIGR00398,TIGR00405,TIGR00408,TIGR00422,TIGR00425,TIGR00432,TIGR00442,TIGR00448,TIGR00456,TIGR00458,TIGR00463,TIGR00468,TIGR00471,TIGR00490,TIGR00491,TIGR00501,TIGR00521,TIGR00522,TIGR00549,TIGR00658,TIGR00670,TIGR00729,TIGR00936,TIGR00982,TIGR01008,TIGR01012,TIGR01018,TIGR01020,TIGR01025,TIGR01028,TIGR01038,TIGR01046,TIGR01052,TIGR01060,TIGR01077,TIGR01080,TIGR01309,TIGR01952,TIGR02076,TIGR02153,TIGR02236,TIGR02258,TIGR02338,TIGR02389,TIGR02390,TIGR02651,TIGR03626,TIGR03628,TIGR03629,TIGR03636,TIGR03653,TIGR03665,TIGR03670,TIGR03671,TIGR03672,TIGR03673,TIGR03674,TIGR03677,TIGR03680,TIGR03683,TIGR03684,TIGR03722\tPF01496.14,PF13685.1\t\tTIGR01213,TIGR03627\n"
     ]
    }
   ],
   "source": [
    "cat /tmp/gtdbtk/identify/gtdbtk.ar122.markers_summary.tsv "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 3: Aligning genomes (align)\n",
    "\n",
    "The align step will align all identified markers, determine the most likely domain and output a concatenated MSA."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2020-08-03 11:04:04] \u001B[1mINFO:\u001B[0m GTDB-Tk v1.3.0\n",
      "[2020-08-03 11:04:04] \u001B[1mINFO:\u001B[0m gtdbtk align --identify_dir /tmp/gtdbtk/identify --out_dir /tmp/gtdbtk/align --cpus 2\n",
      "[2020-08-03 11:04:04] \u001B[1mINFO:\u001B[0m Using GTDB-Tk reference data version r95: /srv/db/gtdbtk/official/release95\n",
      "[2020-08-03 11:04:04] \u001B[1mINFO:\u001B[0m Aligning markers in 2 genomes with 2 threads.\n",
      "[2020-08-03 11:04:04] \u001B[1mINFO:\u001B[0m Processing 2 genomes identified as archaeal.\n",
      "[2020-08-03 11:04:04] \u001B[1mINFO:\u001B[0m Read concatenated alignment for 1,672 GTDB genomes.\n",
      "==> Aligned 2/2 (100%) genomes [ 1.17s/it, ETA 00:00]\n",
      "[2020-08-03 11:04:07] \u001B[1mINFO:\u001B[0m Masking columns of archaeal multiple sequence alignment using canonical mask.\n",
      "==> Masked 1674/1674 (100%) alignments [656.58it/s, ETA 00:00]\n",
      "[2020-08-03 11:04:09] \u001B[1mINFO:\u001B[0m Masked archaeal alignment from 32,675 to 5,124 AAs.\n",
      "[2020-08-03 11:04:09] \u001B[1mINFO:\u001B[0m 0 archaeal user genomes have amino acids in <10.0% of columns in filtered MSA.\n",
      "[2020-08-03 11:04:09] \u001B[1mINFO:\u001B[0m Creating concatenated alignment for 1,674 archaeal GTDB and user genomes.\n",
      "[2020-08-03 11:04:09] \u001B[1mINFO:\u001B[0m Creating concatenated alignment for 2 archaeal user genomes.\n",
      "[2020-08-03 11:04:09] \u001B[1mINFO:\u001B[0m Done.\n"
     ]
    }
   ],
   "source": [
    "gtdbtk align --identify_dir /tmp/gtdbtk/identify --out_dir /tmp/gtdbtk/align --cpus 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results\n",
    "It is important to pay attention to the output, if a genome had a low number of markers identified it will be excluded from the analysis at this step. A warning will appear if that is the case.\n",
    "\n",
    "Depending on the domain, a prefixed file of either `ar122` or `bac120` will appear containing the MSA of the user genomes and the GTDB genomes, or just the user genomes (`gtdbtk.ar122.msa.fasta` and `gtdbtk.ar122.user_msa.fasta` respectively.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001B[0m\u001B[38;5;27malign\u001B[0m                      \u001B[38;5;51mgtdbtk.ar122.user_msa.fasta\u001B[0m  \u001B[38;5;27midentify\u001B[0m\n",
      "\u001B[38;5;51mgtdbtk.ar122.filtered.tsv\u001B[0m  gtdbtk.log\n",
      "\u001B[38;5;51mgtdbtk.ar122.msa.fasta\u001B[0m     gtdbtk.warnings.log\n"
     ]
    }
   ],
   "source": [
    "ls /tmp/gtdbtk/align"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Classifying genomes (classify)\n",
    "The classify step will place the genomes into a reference tree, then determine their most likely classification."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2020-08-03 11:04:10] \u001B[1mINFO:\u001B[0m GTDB-Tk v1.3.0\n",
      "[2020-08-03 11:04:10] \u001B[1mINFO:\u001B[0m gtdbtk classify --genome_dir /tmp/gtdbtk/genomes --align_dir /tmp/gtdbtk/align --out_dir /tmp/gtdbtk/classify -x gz --cpus 2\n",
      "[2020-08-03 11:04:10] \u001B[1mINFO:\u001B[0m Using GTDB-Tk reference data version r95: /srv/db/gtdbtk/official/release95\n",
      "[2020-08-03 11:04:10] \u001B[1mINFO:\u001B[0m Placing 2 archaeal genomes into reference tree with pplacer using 2 cpus (be patient).\n",
      "==> Step 9 of 9: placing genome 2 of 2 (100.00%).                                                              \n",
      "[2020-08-03 11:05:22] \u001B[1mINFO:\u001B[0m pplacer version: v1.1.alpha19-0-g807f6f3\n",
      "[2020-08-03 11:05:22] \u001B[1mINFO:\u001B[0m Calculating RED values based on reference tree.\n",
      "[2020-08-03 11:05:22] \u001B[1mINFO:\u001B[0m Calculating average nucleotide identity using FastANI.\n",
      "[2020-08-03 11:05:22] \u001B[1mINFO:\u001B[0m fastANI version: 1.31\n",
      "==> Processed 4/4 (100%) comparisons [ 2.49it/s, ETA 00:00]\n",
      "[2020-08-03 11:05:24] \u001B[1mINFO:\u001B[0m 2 genome(s) have been classified using FastANI and pplacer.\n",
      "[2020-08-03 11:05:24] \u001B[1mINFO:\u001B[0m Done.\n"
     ]
    }
   ],
   "source": [
    "gtdbtk classify --genome_dir /tmp/gtdbtk/genomes --align_dir /tmp/gtdbtk/align --out_dir /tmp/gtdbtk/classify -x gz --cpus 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Results\n",
    "The two main files output (one again, depending on their domain) are the summary file, and the reference tree containing those genomes (`gtdbtk.ar122.summary.tsv`, and `gtdbtk.ar122.classify.tree` respectively). Classification of the genomes are present in the summary file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001B[0m\u001B[38;5;27mclassify\u001B[0m                    \u001B[38;5;51mgtdbtk.ar122.summary.tsv\u001B[0m  gtdbtk.warnings.log\n",
      "\u001B[38;5;51mgtdbtk.ar122.classify.tree\u001B[0m  gtdbtk.log\n"
     ]
    }
   ],
   "source": [
    "ls /tmp/gtdbtk/classify"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Bash",
   "language": "bash",
   "name": "bash"
  },
  "language_info": {
   "codemirror_mode": "shell",
   "file_extension": ".sh",
   "mimetype": "text/x-sh",
   "name": "bash"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}